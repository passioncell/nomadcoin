{"version":3,"sources":["../../src/blockchain.js"],"names":["CryptoJS","require","Block","index","hash","previousHash","timestamp","data","genesisBlock","blockchain","getNewestBlock","length","getTimestamp","Date","getTime","createHash","SHA256","toString","createNewBlock","previousBlock","newBlockIndex","newTimestamp","newHash","newBlock"],"mappings":";;;;AAAA,IAAMA,WAAWC,QAAQ,WAAR,CAAjB;;IAEMC,K,GACJ,eAAYC,KAAZ,EAAmBC,IAAnB,EAAyBC,YAAzB,EAAuCC,SAAvC,EAAkDC,IAAlD,EAAwD;AAAA;;AACtD,OAAKJ,KAAL,GAAaA,KAAb;AACA,OAAKC,IAAL,GAAYA,IAAZ;AACA,OAAKC,YAAL,GAAoBA,YAApB;AACA,OAAKC,SAAL,GAAiBA,SAAjB;AACA,OAAKC,IAAL,GAAYA,IAAZ;AACD,C;;AAGH,IAAMC,eAAe,IAAIN,KAAJ,CACnB,CADmB,EAEnB,kEAFmB,EAEiD;AACpE,IAHmB,EAInB,aAJmB,EAKnB,uBALmB,CAArB;;AAQA,IAAIO,aAAa,CAACD,YAAD,CAAjB;;AAEA,IAAME,eAAe,SAAfA,YAAe;AAAA,SAAMD,WAAWA,WAAWE,MAAX,GAAmB,CAA9B,CAAN;AAAA,CAArB;;AAEA,IAAMC,eAAe,SAAfA,YAAe;AAAA,SAAM,IAAIC,IAAJ,GAAWC,OAAX,KAAuB,IAA7B;AAAA,CAArB;;AAEA,IAAMC,aAAa,SAAbA,UAAa,CAACZ,KAAD,EAAQE,YAAR,EAAsBC,SAAtB,EAAiCC,IAAjC;AAAA,SACjBP,SAASgB,MAAT,CAAgBb,QAAQE,YAAR,GAAuBC,SAAvB,GAAmCC,IAAnD,EAAyDU,QAAzD,EADiB;AAAA,CAAnB;;AAGA,IAAMC,iBAAiB,SAAjBA,cAAiB,OAAQ;AAC7B,MAAMC,gBAAgBT,cAAtB;AACA,MAAMU,gBAAgBD,cAAchB,KAAd,GAAsB,CAA5C;AACA,MAAMkB,eAAeT,cAArB;AACA,MAAMU,UAAUP,WACdK,aADc,EAEdD,cAAcf,IAFA,EAGdiB,YAHc,EAIdd,IAJc,CAAhB;;AAMA,MAAMgB,WAAW,IAAIrB,KAAJ,CACfkB,aADe,EAEfE,OAFe,EAGfH,cAAcf,IAHC,EAIfiB,YAJe,EAKfd,IALe,CAAjB;AAOD,CAjBD","file":"blockchain.js","sourcesContent":["const CryptoJS = require(\"crypto-js\");\r\n\r\nclass Block {\r\n  constructor(index, hash, previousHash, timestamp, data) {\r\n    this.index = index;\r\n    this.hash = hash;\r\n    this.previousHash = previousHash;\r\n    this.timestamp = timestamp;\r\n    this.data = data;\r\n  }\r\n}\r\n\r\nconst genesisBlock = new Block(\r\n  0,\r\n  'b9d40a0cfdb3a57fcf7ae8d521faedadde588ba31d7e428071a98fadd32ac81d', // index + previosHash + timestamp + data\r\n  null,\r\n  1520838250756,\r\n  \"This is the genesis!!\"\r\n);\r\n\r\nlet blockchain = [genesisBlock];\r\n\r\nconst getNewestBlock = () => blockchain[blockchain.length -1];\r\n\r\nconst getTimestamp = () => new Date().getTime() / 1000;\r\n\r\nconst createHash = (index, previousHash, timestamp, data) =>\r\n  CryptoJS.SHA256(index + previousHash + timestamp + data).toString();\r\n\r\nconst createNewBlock = data => {\r\n  const previousBlock = getNewestBlock();\r\n  const newBlockIndex = previousBlock.index + 1;\r\n  const newTimestamp = getTimestamp();\r\n  const newHash = createHash(\r\n    newBlockIndex,\r\n    previousBlock.hash,\r\n    newTimestamp,\r\n    data);\r\n\r\n  const newBlock = new Block(\r\n    newBlockIndex,\r\n    newHash,\r\n    previousBlock.hash,\r\n    newTimestamp,\r\n    data\r\n  );\r\n};\r\n"]}
